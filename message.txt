<------------------------------------------------------------------------------------------->
关键字		<void>
<------------------------------------------------------------------------------------------->
标识符		(hanoi)
<------------------------------------------------------------------------------------------->
界符		(
<------------------------------------------------------------------------------------------->
关键字		<string>
<------------------------------------------------------------------------------------------->
标识符		(a)
		对形式参数的声明进行语义检查
<------------------------------------------------------------------------------------------->
界符		,
<------------------------------------------------------------------------------------------->
关键字		<string>
<------------------------------------------------------------------------------------------->
标识符		(b)
		对形式参数的声明进行语义检查
<------------------------------------------------------------------------------------------->
界符		,
<------------------------------------------------------------------------------------------->
关键字		<string>
<------------------------------------------------------------------------------------------->
标识符		(c)
		对形式参数的声明进行语义检查
<------------------------------------------------------------------------------------------->
界符		,
<------------------------------------------------------------------------------------------->
关键字		<int>
<------------------------------------------------------------------------------------------->
标识符		(n)
		对形式参数的声明进行语义检查
<------------------------------------------------------------------------------------------->
界符		)
<------------------------------------------------------------------------------------------->
界符		;
	函数声明	{类型:<void>	,名称:(hanoi)	,参数列表:[<string>,<string>,<string>,<int>]}
		对函数的声明定义行进行语义检查
			函数 void hanoi()	进入-->符号表
<------------------------------------------------------------------------------------------->
关键字		<int>
<------------------------------------------------------------------------------------------->
标识符		(main)
<------------------------------------------------------------------------------------------->
界符		(
<------------------------------------------------------------------------------------------->
界符		)
<------------------------------------------------------------------------------------------->
界符		{
	函数定义	{类型:<int>	,名称:(main)	,参数列表:[]}
		对函数的声明定义行进行语义检查
			函数 int main()	进入-->符号表
生成函数main()的首部
<------------------------------------------------------------------------------------------->
关键字		<int>
<------------------------------------------------------------------------------------------->
标识符		(n)
		对局部变量的声明进行语义检查
			函数 int main()	局部变量 <int>(n)	进入-->符号表
	局部变量声明	{类型:<int>	,名称:(n)}
<------------------------------------------------------------------------------------------->
界符		;
<------------------------------------------------------------------------------------------->
关键字		<out>
	out语句
<------------------------------------------------------------------------------------------->
界符		<<
<------------------------------------------------------------------------------------------->
字符串		"输入盘子个数："
			串 "输入盘子个数："进入-->串空间,id=1
<------------------------------------------------------------------------------------------->
界符		;
		对表达式操作数类型进行语义检查
生成表达式<string> + <string> => <string>
生成对象<string>的输出操作代码
<------------------------------------------------------------------------------------------->
关键字		<in>
	in语句
<------------------------------------------------------------------------------------------->
界符		>>
<------------------------------------------------------------------------------------------->
标识符		(n)
		对引用全局变量进行语义检查
		对输入对象类型进行语义检查
生成对象<int>(n)的输入操作代码
<------------------------------------------------------------------------------------------->
界符		;
<------------------------------------------------------------------------------------------->
标识符		(hanoi)
<------------------------------------------------------------------------------------------->
界符		(
<------------------------------------------------------------------------------------------->
字符串		"A"
			串 "A"进入-->串空间,id=2
<------------------------------------------------------------------------------------------->
界符		,
		对表达式操作数类型进行语义检查
生成表达式<string> + <string> => <string>
<------------------------------------------------------------------------------------------->
字符串		"B"
			串 "B"进入-->串空间,id=3
<------------------------------------------------------------------------------------------->
界符		,
		对表达式操作数类型进行语义检查
生成表达式<string> + <string> => <string>
<------------------------------------------------------------------------------------------->
字符串		"C"
			串 "C"进入-->串空间,id=4
<------------------------------------------------------------------------------------------->
界符		,
		对表达式操作数类型进行语义检查
生成表达式<string> + <string> => <string>
<------------------------------------------------------------------------------------------->
标识符		(n)
<------------------------------------------------------------------------------------------->
界符		)
		对引用全局变量进行语义检查
	函数调用语句
		对函数调用规则进行语义检查
产生函数hanoi()的调用代码
<------------------------------------------------------------------------------------------->
界符		;
<------------------------------------------------------------------------------------------->
关键字		<return>
	return语句
<------------------------------------------------------------------------------------------->
数字		[0]
<------------------------------------------------------------------------------------------->
界符		;
		对return语句返回值的类型进行语义检查
生成return <int> 语句
<------------------------------------------------------------------------------------------->
界符		}
			函数 int main()	局部变量<int>(n)	退出<--符号表
<------------------------------------------------------------------------------------------->
关键字		<void>
<------------------------------------------------------------------------------------------->
标识符		(hanoi)
<------------------------------------------------------------------------------------------->
界符		(
<------------------------------------------------------------------------------------------->
关键字		<string>
<------------------------------------------------------------------------------------------->
标识符		(a)
		对形式参数的声明进行语义检查
<------------------------------------------------------------------------------------------->
界符		,
<------------------------------------------------------------------------------------------->
关键字		<string>
<------------------------------------------------------------------------------------------->
标识符		(b)
		对形式参数的声明进行语义检查
<------------------------------------------------------------------------------------------->
界符		,
<------------------------------------------------------------------------------------------->
关键字		<string>
<------------------------------------------------------------------------------------------->
标识符		(c)
		对形式参数的声明进行语义检查
<------------------------------------------------------------------------------------------->
界符		,
<------------------------------------------------------------------------------------------->
关键字		<int>
<------------------------------------------------------------------------------------------->
标识符		(n)
		对形式参数的声明进行语义检查
<------------------------------------------------------------------------------------------->
界符		)
<------------------------------------------------------------------------------------------->
界符		{
	函数定义	{类型:<void>	,名称:(hanoi)	,参数列表:[<string>,<string>,<string>,<int>]}
		对函数的声明定义行进行语义检查
			函数 void hanoi()	参数变量<int>(n)	进入-->符号表
			函数 void hanoi()	参数变量<string>(c)	进入-->符号表
			函数 void hanoi()	参数变量<string>(b)	进入-->符号表
			函数 void hanoi()	参数变量<string>(a)	进入-->符号表
生成函数hanoi()的首部
<------------------------------------------------------------------------------------------->
关键字		<if>
	if-else复合语句
<------------------------------------------------------------------------------------------->
界符		(
生成if-else条件框架
<------------------------------------------------------------------------------------------->
标识符		(n)
<------------------------------------------------------------------------------------------->
界符		=
		对引用全局变量进行语义检查
<------------------------------------------------------------------------------------------->
数字		[0]
<------------------------------------------------------------------------------------------->
界符		)
		对表达式操作数类型进行语义检查
生成表达式<int> = <int> => <char>
		对条件表达式类型进行语义检查
生成复合语句条件
<------------------------------------------------------------------------------------------->
界符		{
<------------------------------------------------------------------------------------------->
关键字		<return>
	return语句
<------------------------------------------------------------------------------------------->
界符		;
		对return语句返回值的类型进行语义检查
<------------------------------------------------------------------------------------------->
界符		}
<------------------------------------------------------------------------------------------->
关键字		<else>
<------------------------------------------------------------------------------------------->
界符		{
<------------------------------------------------------------------------------------------->
标识符		(hanoi)
<------------------------------------------------------------------------------------------->
界符		(
<------------------------------------------------------------------------------------------->
标识符		(a)
<------------------------------------------------------------------------------------------->
界符		,
		对引用全局变量进行语义检查
		对表达式操作数类型进行语义检查
生成表达式<string> + <string> => <string>
<------------------------------------------------------------------------------------------->
标识符		(c)
<------------------------------------------------------------------------------------------->
界符		,
		对引用全局变量进行语义检查
		对表达式操作数类型进行语义检查
生成表达式<string> + <string> => <string>
<------------------------------------------------------------------------------------------->
标识符		(b)
<------------------------------------------------------------------------------------------->
界符		,
		对引用全局变量进行语义检查
		对表达式操作数类型进行语义检查
生成表达式<string> + <string> => <string>
<------------------------------------------------------------------------------------------->
标识符		(n)
<------------------------------------------------------------------------------------------->
界符		-
		对引用全局变量进行语义检查
<------------------------------------------------------------------------------------------->
数字		[1]
<------------------------------------------------------------------------------------------->
界符		)
		对表达式操作数类型进行语义检查
生成表达式<int> - <int> => <int>
	函数调用语句
		对函数调用规则进行语义检查
产生函数hanoi()的调用代码
<------------------------------------------------------------------------------------------->
界符		;
<------------------------------------------------------------------------------------------->
关键字		<out>
	out语句
<------------------------------------------------------------------------------------------->
界符		<<
<------------------------------------------------------------------------------------------->
字符串		"Move "
			串 "Move "进入-->串空间,id=5
<------------------------------------------------------------------------------------------->
界符		+
<------------------------------------------------------------------------------------------->
标识符		(n)
<------------------------------------------------------------------------------------------->
界符		+
		对引用全局变量进行语义检查
<------------------------------------------------------------------------------------------->
字符串		":	["
			串 ":	["进入-->串空间,id=6
<------------------------------------------------------------------------------------------->
界符		+
<------------------------------------------------------------------------------------------->
标识符		(a)
<------------------------------------------------------------------------------------------->
界符		+
		对引用全局变量进行语义检查
<------------------------------------------------------------------------------------------->
字符串		" --> "
			串 " --> "进入-->串空间,id=7
<------------------------------------------------------------------------------------------->
界符		+
<------------------------------------------------------------------------------------------->
标识符		(c)
<------------------------------------------------------------------------------------------->
界符		+
		对引用全局变量进行语义检查
<------------------------------------------------------------------------------------------->
字符串		"]
"
			串 "]
"进入-->串空间,id=8
<------------------------------------------------------------------------------------------->
界符		;
		对表达式操作数类型进行语义检查
生成表达式<string> + <string> => <string>
		对表达式操作数类型进行语义检查
生成表达式<string> + <string> => <string>
		对表达式操作数类型进行语义检查
生成表达式<string> + <string> => <string>
		对表达式操作数类型进行语义检查
生成表达式<string> + <string> => <string>
		对表达式操作数类型进行语义检查
生成表达式<int> + <string> => <string>
		对表达式操作数类型进行语义检查
生成表达式<string> + <string> => <string>
		对表达式操作数类型进行语义检查
生成表达式<string> + <string> => <string>
生成对象<string>的输出操作代码
<------------------------------------------------------------------------------------------->
标识符		(hanoi)
<------------------------------------------------------------------------------------------->
界符		(
<------------------------------------------------------------------------------------------->
标识符		(b)
<------------------------------------------------------------------------------------------->
界符		,
		对引用全局变量进行语义检查
		对表达式操作数类型进行语义检查
生成表达式<string> + <string> => <string>
<------------------------------------------------------------------------------------------->
标识符		(a)
<------------------------------------------------------------------------------------------->
界符		,
		对引用全局变量进行语义检查
		对表达式操作数类型进行语义检查
生成表达式<string> + <string> => <string>
<------------------------------------------------------------------------------------------->
标识符		(c)
<------------------------------------------------------------------------------------------->
界符		,
		对引用全局变量进行语义检查
		对表达式操作数类型进行语义检查
生成表达式<string> + <string> => <string>
<------------------------------------------------------------------------------------------->
标识符		(n)
<------------------------------------------------------------------------------------------->
界符		-
		对引用全局变量进行语义检查
<------------------------------------------------------------------------------------------->
数字		[1]
<------------------------------------------------------------------------------------------->
界符		)
		对表达式操作数类型进行语义检查
生成表达式<int> - <int> => <int>
	函数调用语句
		对函数调用规则进行语义检查
产生函数hanoi()的调用代码
<------------------------------------------------------------------------------------------->
界符		;
<------------------------------------------------------------------------------------------->
界符		}
<------------------------------------------------------------------------------------------->
界符		}
			函数 void hanoi()	参数变量<string>(a)	退出<--符号表
			函数 void hanoi()	参数变量<string>(b)	退出<--符号表
			函数 void hanoi()	参数变量<string>(c)	退出<--符号表
			函数 void hanoi()	参数变量<int>(n)	退出<--符号表
生成函数hanoi()的尾部
生成数据段中的静态数据区、文字池和辅助栈
编译完成！(错误=0 警告=0)
------------段信息------------
.bss:0
.data:39
.text:3117
------------符号信息------------
hanoi:全局
@str_1:局部
@str_2:局部
@str_3:局部
@str_4:局部
@str_5:局部
@str_6:局部
@str_7:局部
@str_8:局部
@s_ebp:外部全局
main:全局
@buffer:外部全局
@str2long:外部全局
@procBuf:外部全局
@s_esp:外部全局
------------重定位信息------------
.text:5<-@s_esp
.text:11<-@s_esp
.text:19<-@s_ebp
.text:26<-@s_ebp
.text:32<-@s_esp
.text:38<-@s_esp
.text:61<-@s_esp
.text:67<-@s_esp
.text:109<-@str_1
.text:145<-@s_esp
.text:151<-@s_esp
.text:182<-@buffer
.text:204<-@procBuf
.text:223<-@s_esp
.text:229<-@s_esp
.text:271<-@str_2
.text:307<-@s_esp
.text:313<-@s_esp
.text:331<-@s_esp
.text:337<-@s_esp
.text:379<-@str_3
.text:415<-@s_esp
.text:421<-@s_esp
.text:439<-@s_esp
.text:445<-@s_esp
.text:487<-@str_4
.text:523<-@s_esp
.text:529<-@s_esp
.text:572<-@s_ebp
.text:578<-@s_esp
.text:584<-@s_esp
.text:590<-@s_esp
.text:599<-@s_ebp
.text:605<-@s_esp
.text:611<-@s_esp
.text:626<-@s_esp
.text:632<-@s_esp
.text:640<-@s_ebp
.text:647<-@s_ebp
.text:653<-@s_esp
.text:659<-@s_esp
.text:724<-@s_ebp
.text:730<-@s_esp
.text:736<-@s_esp
.text:742<-@s_esp
.text:751<-@s_ebp
.text:757<-@s_esp
.text:763<-@s_esp
.text:789<-@s_esp
.text:795<-@s_esp
.text:878<-@s_esp
.text:884<-@s_esp
.text:897<-@s_esp
.text:903<-@s_esp
.text:986<-@s_esp
.text:992<-@s_esp
.text:1005<-@s_esp
.text:1011<-@s_esp
.text:1094<-@s_esp
.text:1100<-@s_esp
.text:1181<-@s_esp
.text:1187<-@s_esp
.text:1229<-@str_8
.text:1265<-@s_esp
.text:1271<-@s_esp
.text:1279<-@s_esp
.text:1285<-@s_esp
.text:1356<-@str2long
.text:1388<-@s_esp
.text:1394<-@s_esp
.text:1407<-@s_esp
.text:1413<-@s_esp
.text:1496<-@s_esp
.text:1502<-@s_esp
.text:1510<-@s_esp
.text:1516<-@s_esp
.text:1560<-@str_7
.text:1577<-@str2long
.text:1613<-@s_esp
.text:1619<-@s_esp
.text:1632<-@s_esp
.text:1638<-@s_esp
.text:1721<-@s_esp
.text:1727<-@s_esp
.text:1735<-@s_esp
.text:1741<-@s_esp
.text:1812<-@str2long
.text:1844<-@s_esp
.text:1850<-@s_esp
.text:1863<-@s_esp
.text:1869<-@s_esp
.text:1952<-@s_esp
.text:1958<-@s_esp
.text:1966<-@s_esp
.text:1972<-@s_esp
.text:2016<-@str_6
.text:2033<-@str2long
.text:2069<-@s_esp
.text:2075<-@s_esp
.text:2088<-@s_esp
.text:2094<-@s_esp
.text:2177<-@s_esp
.text:2183<-@s_esp
.text:2191<-@s_esp
.text:2197<-@s_esp
.text:2317<-@str2long
.text:2323<-@s_esp
.text:2329<-@s_esp
.text:2342<-@s_esp
.text:2348<-@s_esp
.text:2431<-@s_esp
.text:2437<-@s_esp
.text:2445<-@s_esp
.text:2451<-@s_esp
.text:2495<-@str_5
.text:2512<-@str2long
.text:2548<-@s_esp
.text:2554<-@s_esp
.text:2567<-@s_esp
.text:2573<-@s_esp
.text:2656<-@s_esp
.text:2662<-@s_esp
.text:2699<-@s_esp
.text:2705<-@s_esp
.text:2788<-@s_esp
.text:2794<-@s_esp
.text:2807<-@s_esp
.text:2813<-@s_esp
.text:2896<-@s_esp
.text:2902<-@s_esp
.text:2915<-@s_esp
.text:2921<-@s_esp
.text:3004<-@s_esp
.text:3010<-@s_esp
.text:3068<-@s_ebp
.text:3074<-@s_esp
.text:3080<-@s_esp
.text:3086<-@s_esp
.text:3095<-@s_ebp
.text:3101<-@s_esp
.text:3107<-@s_esp
------------定义符号------------
@str_1
@str_2
@str_3
@str_4
@str_5
@str_6
@str_7
@str_8
------------段信息------------
.bss:65536
.data:290
.text:119
------------符号信息------------
@str_2long_data:局部
@s_ebp:全局
main:外部全局
@buffer:全局
@str2long:全局
@s_base:局部
@procBuf:全局
@buffer_len:全局
@s_esp:全局
_start:全局
------------重定位信息------------
.text:6<-@str_2long_data
.text:36<-@buffer
.text:95<-@buffer_len
.text:103<-main
.data:282<-@s_base
------------定义符号------------
@str_2long_data
@buffer
@buffer_len
@s_esp
@s_ebp
----------地址分配----------
.text	addr=080400a0	off=000000a0	size=00000ca7(3239)
.data	addr=08041d48	off=00000d48	size=0000014a(330)
.bss	addr=08041e94	off=00000e94	size=00010000(65536)
----------定义符号解析----------
hanoi	0804030d	/var/test/cit-x86/work/test.o
@str_1	08041d48	/var/test/cit-x86/work/test.o
@str_2	08041d5d	/var/test/cit-x86/work/test.o
@str_3	08041d5e	/var/test/cit-x86/work/test.o
@str_4	08041d5f	/var/test/cit-x86/work/test.o
@str_5	08041d60	/var/test/cit-x86/work/test.o
@str_6	08041d65	/var/test/cit-x86/work/test.o
@str_7	08041d68	/var/test/cit-x86/work/test.o
@str_8	08041d6d	/var/test/cit-x86/work/test.o
main	080400a0	/var/test/cit-x86/work/test.o
@str_2long_data	08041d70	/var/test/cit-x86/work/common.o
@s_ebp	08041e8e	/var/test/cit-x86/work/common.o
@buffer	08041d8a	/var/test/cit-x86/work/common.o
@str2long	08040cd0	/var/test/cit-x86/work/common.o
@s_base	08051e94	/var/test/cit-x86/work/common.o
@procBuf	08040cf3	/var/test/cit-x86/work/common.o
@buffer_len	08041e89	/var/test/cit-x86/work/common.o
@s_esp	08041e8a	/var/test/cit-x86/work/common.o
_start	08040d36	/var/test/cit-x86/work/common.o
----------未定义符号解析----------
@s_ebp	08041e8e	/var/test/cit-x86/work/test.o
@buffer	08041d8a	/var/test/cit-x86/work/test.o
@str2long	08040cd0	/var/test/cit-x86/work/test.o
@procBuf	08040cf3	/var/test/cit-x86/work/test.o
@s_esp	08041e8a	/var/test/cit-x86/work/test.o
main	080400a0	/var/test/cit-x86/work/common.o
--------------重定位----------------
@s_esp	relAddr=080400a5	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_esp	relAddr=080400ab	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_ebp	relAddr=080400b3	symAddr=08041e8e
绝对地址修正：原地址=00000000	修正后地址=08041e8e
@s_ebp	relAddr=080400ba	symAddr=08041e8e
绝对地址修正：原地址=00000000	修正后地址=08041e8e
@s_esp	relAddr=080400c0	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_esp	relAddr=080400c6	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_esp	relAddr=080400dd	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_esp	relAddr=080400e3	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@str_1	relAddr=0804010d	symAddr=08041d48
绝对地址修正：原地址=00000000	修正后地址=08041d48
@s_esp	relAddr=08040131	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_esp	relAddr=08040137	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@buffer	relAddr=08040156	symAddr=08041d8a
绝对地址修正：原地址=00000000	修正后地址=08041d8a
@procBuf	relAddr=0804016c	symAddr=08040cf3
相对地址修正：原地址=fffffffc	修正后地址=00000b83
@s_esp	relAddr=0804017f	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_esp	relAddr=08040185	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@str_2	relAddr=080401af	symAddr=08041d5d
绝对地址修正：原地址=00000015	修正后地址=08041d5d
@s_esp	relAddr=080401d3	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_esp	relAddr=080401d9	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_esp	relAddr=080401eb	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_esp	relAddr=080401f1	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@str_3	relAddr=0804021b	symAddr=08041d5e
绝对地址修正：原地址=00000016	修正后地址=08041d5e
@s_esp	relAddr=0804023f	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_esp	relAddr=08040245	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_esp	relAddr=08040257	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_esp	relAddr=0804025d	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@str_4	relAddr=08040287	symAddr=08041d5f
绝对地址修正：原地址=00000017	修正后地址=08041d5f
@s_esp	relAddr=080402ab	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_esp	relAddr=080402b1	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_ebp	relAddr=080402dc	symAddr=08041e8e
绝对地址修正：原地址=00000000	修正后地址=08041e8e
@s_esp	relAddr=080402e2	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_esp	relAddr=080402e8	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_esp	relAddr=080402ee	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_ebp	relAddr=080402f7	symAddr=08041e8e
绝对地址修正：原地址=00000000	修正后地址=08041e8e
@s_esp	relAddr=080402fd	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_esp	relAddr=08040303	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_esp	relAddr=08040312	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_esp	relAddr=08040318	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_ebp	relAddr=08040320	symAddr=08041e8e
绝对地址修正：原地址=00000000	修正后地址=08041e8e
@s_ebp	relAddr=08040327	symAddr=08041e8e
绝对地址修正：原地址=00000000	修正后地址=08041e8e
@s_esp	relAddr=0804032d	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_esp	relAddr=08040333	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_ebp	relAddr=08040374	symAddr=08041e8e
绝对地址修正：原地址=00000000	修正后地址=08041e8e
@s_esp	relAddr=0804037a	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_esp	relAddr=08040380	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_esp	relAddr=08040386	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_ebp	relAddr=0804038f	symAddr=08041e8e
绝对地址修正：原地址=00000000	修正后地址=08041e8e
@s_esp	relAddr=08040395	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_esp	relAddr=0804039b	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_esp	relAddr=080403b5	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_esp	relAddr=080403bb	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_esp	relAddr=0804040e	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_esp	relAddr=08040414	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_esp	relAddr=08040421	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_esp	relAddr=08040427	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_esp	relAddr=0804047a	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_esp	relAddr=08040480	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_esp	relAddr=0804048d	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_esp	relAddr=08040493	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_esp	relAddr=080404e6	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_esp	relAddr=080404ec	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_esp	relAddr=0804053d	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_esp	relAddr=08040543	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@str_8	relAddr=0804056d	symAddr=08041d6d
绝对地址修正：原地址=00000025	修正后地址=08041d6d
@s_esp	relAddr=08040591	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_esp	relAddr=08040597	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_esp	relAddr=0804059f	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_esp	relAddr=080405a5	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@str2long	relAddr=080405ec	symAddr=08040cd0
相对地址修正：原地址=fffffffc	修正后地址=000006e0
@s_esp	relAddr=0804060c	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_esp	relAddr=08040612	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_esp	relAddr=0804061f	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_esp	relAddr=08040625	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_esp	relAddr=08040678	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_esp	relAddr=0804067e	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_esp	relAddr=08040686	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_esp	relAddr=0804068c	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@str_7	relAddr=080406b8	symAddr=08041d68
绝对地址修正：原地址=00000020	修正后地址=08041d68
@str2long	relAddr=080406c9	symAddr=08040cd0
相对地址修正：原地址=fffffffc	修正后地址=00000603
@s_esp	relAddr=080406ed	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_esp	relAddr=080406f3	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_esp	relAddr=08040700	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_esp	relAddr=08040706	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_esp	relAddr=08040759	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_esp	relAddr=0804075f	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_esp	relAddr=08040767	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_esp	relAddr=0804076d	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@str2long	relAddr=080407b4	symAddr=08040cd0
相对地址修正：原地址=fffffffc	修正后地址=00000518
@s_esp	relAddr=080407d4	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_esp	relAddr=080407da	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_esp	relAddr=080407e7	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_esp	relAddr=080407ed	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_esp	relAddr=08040840	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_esp	relAddr=08040846	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_esp	relAddr=0804084e	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_esp	relAddr=08040854	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@str_6	relAddr=08040880	symAddr=08041d65
绝对地址修正：原地址=0000001d	修正后地址=08041d65
@str2long	relAddr=08040891	symAddr=08040cd0
相对地址修正：原地址=fffffffc	修正后地址=0000043b
@s_esp	relAddr=080408b5	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_esp	relAddr=080408bb	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_esp	relAddr=080408c8	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_esp	relAddr=080408ce	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_esp	relAddr=08040921	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_esp	relAddr=08040927	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_esp	relAddr=0804092f	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_esp	relAddr=08040935	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@str2long	relAddr=080409ad	symAddr=08040cd0
相对地址修正：原地址=fffffffc	修正后地址=0000031f
@s_esp	relAddr=080409b3	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_esp	relAddr=080409b9	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_esp	relAddr=080409c6	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_esp	relAddr=080409cc	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_esp	relAddr=08040a1f	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_esp	relAddr=08040a25	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_esp	relAddr=08040a2d	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_esp	relAddr=08040a33	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@str_5	relAddr=08040a5f	symAddr=08041d60
绝对地址修正：原地址=00000018	修正后地址=08041d60
@str2long	relAddr=08040a70	symAddr=08040cd0
相对地址修正：原地址=fffffffc	修正后地址=0000025c
@s_esp	relAddr=08040a94	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_esp	relAddr=08040a9a	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_esp	relAddr=08040aa7	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_esp	relAddr=08040aad	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_esp	relAddr=08040b00	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_esp	relAddr=08040b06	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_esp	relAddr=08040b2b	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_esp	relAddr=08040b31	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_esp	relAddr=08040b84	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_esp	relAddr=08040b8a	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_esp	relAddr=08040b97	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_esp	relAddr=08040b9d	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_esp	relAddr=08040bf0	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_esp	relAddr=08040bf6	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_esp	relAddr=08040c03	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_esp	relAddr=08040c09	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_esp	relAddr=08040c5c	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_esp	relAddr=08040c62	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_ebp	relAddr=08040c9c	symAddr=08041e8e
绝对地址修正：原地址=00000000	修正后地址=08041e8e
@s_esp	relAddr=08040ca2	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_esp	relAddr=08040ca8	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_esp	relAddr=08040cae	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_ebp	relAddr=08040cb7	symAddr=08041e8e
绝对地址修正：原地址=00000000	修正后地址=08041e8e
@s_esp	relAddr=08040cbd	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_esp	relAddr=08040cc3	symAddr=08041e8a
绝对地址修正：原地址=00000000	修正后地址=08041e8a
@s_base	relAddr=08041e8a	symAddr=08051e94
绝对地址修正：原地址=00000000	修正后地址=08051e94
@str_2long_data	relAddr=08040cd6	symAddr=08041d70
绝对地址修正：原地址=00000000	修正后地址=08041d70
@buffer	relAddr=08040cf4	symAddr=08041d8a
绝对地址修正：原地址=0000001a	修正后地址=08041d8a
@buffer_len	relAddr=08040d2f	symAddr=08041e89
绝对地址修正：原地址=00000119	修正后地址=08041e89
main	relAddr=08040d37	symAddr=080400a0
相对地址修正：原地址=fffffffc	修正后地址=fffff365
开始检测输入文件信息...
正在编译文件/var/test/cit-x86/./file/test.c。
正在汇编文件/var/test/cit-x86/work/test.s。
正在汇编文件/var/test/cit-x86/work/common.s。
正在执行链接。
生成可执行文件/var/test/cit-x86/work/test。
操作成功！
